(window.webpackJsonp=window.webpackJsonp||[]).push([[201],{306:function(a,e){!function(a){a.languages.insertBefore("javascript","function-variable",{"method-variable":{pattern:RegExp("(\\.\\s*)"+a.languages.javascript["function-variable"].pattern.source),lookbehind:!0,alias:["function-variable","method","function","property-access"]}}),a.languages.insertBefore("javascript","function",{method:{pattern:RegExp("(\\.\\s*)"+a.languages.javascript.function.source),lookbehind:!0,alias:["function","property-access"]}}),a.languages.insertBefore("javascript","constant",{"known-class-name":[{pattern:/\b(?:(?:(?:Uint|Int)(?:8|16|32)|Uint8Clamped|Float(?:32|64))?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|(?:Weak)?(?:Set|Map)|WebAssembly)\b/,alias:"class-name"},{pattern:/\b(?:[A-Z]\w*)Error\b/,alias:"class-name"}]}),a.languages.javascript.keyword.unshift({pattern:/\b(?:as|default|export|from|import)\b/,alias:"module"},{pattern:/\bnull\b/,alias:["null","nil"]},{pattern:/\bundefined\b/,alias:"nil"}),a.languages.insertBefore("javascript","operator",{spread:{pattern:/\.{3}/,alias:"operator"},arrow:{pattern:/=>/,alias:"operator"}}),a.languages.insertBefore("javascript","punctuation",{"property-access":{pattern:/(\.\s*)#?[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*/,lookbehind:!0},"maybe-class-name":{pattern:/(^|[^$\w\xA0-\uFFFF])[A-Z][$\w\xA0-\uFFFF]+/,lookbehind:!0},dom:{pattern:/\b(?:document|location|navigator|performance|(?:local|session)Storage|window)\b/,alias:"variable"},console:{pattern:/\bconsole(?=\s*\.)/,alias:"class-name"}});for(var e=["function","function-variable","method","method-variable","property-access"],n=0;n<e.length;n++){var t=e[n],r=a.languages.javascript[t];"RegExp"===a.util.type(r)&&(r=a.languages.javascript[t]={pattern:r});var s=r.inside||{};r.inside=s,s["maybe-class-name"]=/^[A-Z][\s\S]*/}}(Prism)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJpc21qcy9jb21wb25lbnRzL3ByaXNtLWpzLWV4dHJhcy5qcyJdLCJuYW1lcyI6WyJQcmlzbSIsImxhbmd1YWdlcyIsImluc2VydEJlZm9yZSIsInBhdHRlcm4iLCJSZWdFeHAiLCJqYXZhc2NyaXB0Iiwic291cmNlIiwibG9va2JlaGluZCIsImFsaWFzIiwidW5zaGlmdCIsIm1heWJlQ2xhc3NOYW1lVG9rZW5zIiwiaSIsImxlbmd0aCIsInRva2VuIiwidmFsdWUiLCJ1dGlsIiwidHlwZSIsImluc2lkZSJdLCJtYXBwaW5ncyI6IjhFQUFDLFNBQVVBLEdBRVZBLEVBQU1DLFVBQVVDLGFBQWEsYUFBYyxvQkFBcUIsQ0FDL0Qsa0JBQW1CLENBQ2xCQyxRQUFTQyxPQUFPLFlBQWNKLEVBQU1DLFVBQVVJLFdBQVcscUJBQXFCRixRQUFRRyxRQUN0RkMsWUFBWSxFQUNaQyxNQUFPLENBQUMsb0JBQXFCLFNBQVUsV0FBWSxzQkFJckRSLEVBQU1DLFVBQVVDLGFBQWEsYUFBYyxXQUFZLENBQ3RELE9BQVUsQ0FDVEMsUUFBU0MsT0FBTyxZQUFjSixFQUFNQyxVQUFVSSxXQUFxQixTQUFFQyxRQUNyRUMsWUFBWSxFQUNaQyxNQUFPLENBQUMsV0FBWSxzQkFJdEJSLEVBQU1DLFVBQVVDLGFBQWEsYUFBYyxXQUFZLENBQ3RELG1CQUFvQixDQUNuQixDQUdDQyxRQUFTLHlPQUNUSyxNQUFPLGNBRVIsQ0FFQ0wsUUFBUyx3QkFDVEssTUFBTyxpQkFLVlIsRUFBTUMsVUFBVUksV0FBb0IsUUFBRUksUUFDckMsQ0FDQ04sUUFBUyx3Q0FDVEssTUFBTyxVQUVSLENBQ0NMLFFBQVMsV0FDVEssTUFBTyxDQUFDLE9BQVEsUUFFakIsQ0FDQ0wsUUFBUyxnQkFDVEssTUFBTyxRQUlUUixFQUFNQyxVQUFVQyxhQUFhLGFBQWMsV0FBWSxDQUN0RCxPQUFVLENBQ1RDLFFBQVMsUUFDVEssTUFBTyxZQUVSLE1BQVMsQ0FDUkwsUUFBUyxLQUNUSyxNQUFPLGNBSVRSLEVBQU1DLFVBQVVDLGFBQWEsYUFBYyxjQUFlLENBQ3pELGtCQUFtQixDQUNsQkMsUUFBUyxrREFDVEksWUFBWSxHQUViLG1CQUFvQixDQUNuQkosUUFBUyw4Q0FDVEksWUFBWSxHQUViLElBQU8sQ0FFTkosUUFBUyxrRkFDVEssTUFBTyxZQUVSLFFBQVcsQ0FDVkwsUUFBUyxxQkFDVEssTUFBTyxnQkFRVCxJQUZBLElBQUlFLEVBQXVCLENBQUMsV0FBWSxvQkFBcUIsU0FBVSxrQkFBbUIsbUJBRWpGQyxFQUFJLEVBQUdBLEVBQUlELEVBQXFCRSxPQUFRRCxJQUFLLENBQ3JELElBQUlFLEVBQVFILEVBQXFCQyxHQUM3QkcsRUFBUWQsRUFBTUMsVUFBVUksV0FBV1EsR0FHUixXQUEzQmIsRUFBTWUsS0FBS0MsS0FBS0YsS0FDbkJBLEVBQVFkLEVBQU1DLFVBQVVJLFdBQVdRLEdBQVMsQ0FDM0NWLFFBQVNXLElBTVgsSUFBSUcsRUFBU0gsRUFBTUcsUUFBVSxHQUM3QkgsRUFBTUcsT0FBU0EsRUFFZkEsRUFBTyxvQkFBc0IsaUJBcEcvQixDQXVHRWpCIiwiZmlsZSI6IjIwMS5pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoUHJpc20pIHtcblxuXHRQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdqYXZhc2NyaXB0JywgJ2Z1bmN0aW9uLXZhcmlhYmxlJywge1xuXHRcdCdtZXRob2QtdmFyaWFibGUnOiB7XG5cdFx0XHRwYXR0ZXJuOiBSZWdFeHAoJyhcXFxcLlxcXFxzKiknICsgUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHRbJ2Z1bmN0aW9uLXZhcmlhYmxlJ10ucGF0dGVybi5zb3VyY2UpLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdGFsaWFzOiBbJ2Z1bmN0aW9uLXZhcmlhYmxlJywgJ21ldGhvZCcsICdmdW5jdGlvbicsICdwcm9wZXJ0eS1hY2Nlc3MnXVxuXHRcdH1cblx0fSk7XG5cblx0UHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnamF2YXNjcmlwdCcsICdmdW5jdGlvbicsIHtcblx0XHQnbWV0aG9kJzoge1xuXHRcdFx0cGF0dGVybjogUmVnRXhwKCcoXFxcXC5cXFxccyopJyArIFByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0WydmdW5jdGlvbiddLnNvdXJjZSksXG5cdFx0XHRsb29rYmVoaW5kOiB0cnVlLFxuXHRcdFx0YWxpYXM6IFsnZnVuY3Rpb24nLCAncHJvcGVydHktYWNjZXNzJ11cblx0XHR9XG5cdH0pO1xuXG5cdFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2phdmFzY3JpcHQnLCAnY29uc3RhbnQnLCB7XG5cdFx0J2tub3duLWNsYXNzLW5hbWUnOiBbXG5cdFx0XHR7XG5cdFx0XHRcdC8vIHN0YW5kYXJkIGJ1aWx0LWluc1xuXHRcdFx0XHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0c1xuXHRcdFx0XHRwYXR0ZXJuOiAvXFxiKD86KD86KD86VWludHxJbnQpKD86OHwxNnwzMil8VWludDhDbGFtcGVkfEZsb2F0KD86MzJ8NjQpKT9BcnJheXxBcnJheUJ1ZmZlcnxCaWdJbnR8Qm9vbGVhbnxEYXRhVmlld3xEYXRlfEVycm9yfEZ1bmN0aW9ufEludGx8SlNPTnxNYXRofE51bWJlcnxPYmplY3R8UHJvbWlzZXxQcm94eXxSZWZsZWN0fFJlZ0V4cHxTdHJpbmd8U3ltYm9sfCg/OldlYWspPyg/OlNldHxNYXApfFdlYkFzc2VtYmx5KVxcYi8sXG5cdFx0XHRcdGFsaWFzOiAnY2xhc3MtbmFtZSdcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdC8vIGVycm9yc1xuXHRcdFx0XHRwYXR0ZXJuOiAvXFxiKD86W0EtWl1cXHcqKUVycm9yXFxiLyxcblx0XHRcdFx0YWxpYXM6ICdjbGFzcy1uYW1lJ1xuXHRcdFx0fVxuXHRcdF1cblx0fSk7XG5cblx0UHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHRbJ2tleXdvcmQnXS51bnNoaWZ0KFxuXHRcdHtcblx0XHRcdHBhdHRlcm46IC9cXGIoPzphc3xkZWZhdWx0fGV4cG9ydHxmcm9tfGltcG9ydClcXGIvLFxuXHRcdFx0YWxpYXM6ICdtb2R1bGUnXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRwYXR0ZXJuOiAvXFxibnVsbFxcYi8sXG5cdFx0XHRhbGlhczogWydudWxsJywgJ25pbCddXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRwYXR0ZXJuOiAvXFxidW5kZWZpbmVkXFxiLyxcblx0XHRcdGFsaWFzOiAnbmlsJ1xuXHRcdH1cblx0KTtcblxuXHRQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdqYXZhc2NyaXB0JywgJ29wZXJhdG9yJywge1xuXHRcdCdzcHJlYWQnOiB7XG5cdFx0XHRwYXR0ZXJuOiAvXFwuezN9Lyxcblx0XHRcdGFsaWFzOiAnb3BlcmF0b3InXG5cdFx0fSxcblx0XHQnYXJyb3cnOiB7XG5cdFx0XHRwYXR0ZXJuOiAvPT4vLFxuXHRcdFx0YWxpYXM6ICdvcGVyYXRvcidcblx0XHR9XG5cdH0pO1xuXG5cdFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2phdmFzY3JpcHQnLCAncHVuY3R1YXRpb24nLCB7XG5cdFx0J3Byb3BlcnR5LWFjY2Vzcyc6IHtcblx0XHRcdHBhdHRlcm46IC8oXFwuXFxzKikjP1tfJGEtekEtWlxceEEwLVxcdUZGRkZdWyRcXHdcXHhBMC1cXHVGRkZGXSovLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZVxuXHRcdH0sXG5cdFx0J21heWJlLWNsYXNzLW5hbWUnOiB7XG5cdFx0XHRwYXR0ZXJuOiAvKF58W14kXFx3XFx4QTAtXFx1RkZGRl0pW0EtWl1bJFxcd1xceEEwLVxcdUZGRkZdKy8sXG5cdFx0XHRsb29rYmVoaW5kOiB0cnVlXG5cdFx0fSxcblx0XHQnZG9tJzoge1xuXHRcdFx0Ly8gdGhpcyBjb250YWlucyBvbmx5IGEgZmV3IGNvbW1vbmx5IHVzZWQgRE9NIHZhcmlhYmxlc1xuXHRcdFx0cGF0dGVybjogL1xcYig/OmRvY3VtZW50fGxvY2F0aW9ufG5hdmlnYXRvcnxwZXJmb3JtYW5jZXwoPzpsb2NhbHxzZXNzaW9uKVN0b3JhZ2V8d2luZG93KVxcYi8sXG5cdFx0XHRhbGlhczogJ3ZhcmlhYmxlJ1xuXHRcdH0sXG5cdFx0J2NvbnNvbGUnOiB7XG5cdFx0XHRwYXR0ZXJuOiAvXFxiY29uc29sZSg/PVxccypcXC4pLyxcblx0XHRcdGFsaWFzOiAnY2xhc3MtbmFtZSdcblx0XHR9XG5cdH0pO1xuXG5cblx0Ly8gYWRkICdtYXliZS1jbGFzcy1uYW1lJyB0byB0b2tlbnMgd2hpY2ggbWlnaHQgYmUgYSBjbGFzcyBuYW1lXG5cdHZhciBtYXliZUNsYXNzTmFtZVRva2VucyA9IFsnZnVuY3Rpb24nLCAnZnVuY3Rpb24tdmFyaWFibGUnLCAnbWV0aG9kJywgJ21ldGhvZC12YXJpYWJsZScsICdwcm9wZXJ0eS1hY2Nlc3MnXTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IG1heWJlQ2xhc3NOYW1lVG9rZW5zLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIHRva2VuID0gbWF5YmVDbGFzc05hbWVUb2tlbnNbaV07XG5cdFx0dmFyIHZhbHVlID0gUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHRbdG9rZW5dO1xuXG5cdFx0Ly8gY29udmVydCByZWdleCB0byBvYmplY3Rcblx0XHRpZiAoUHJpc20udXRpbC50eXBlKHZhbHVlKSA9PT0gJ1JlZ0V4cCcpIHtcblx0XHRcdHZhbHVlID0gUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHRbdG9rZW5dID0ge1xuXHRcdFx0XHRwYXR0ZXJuOiB2YWx1ZVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBrZWVwIGluIG1pbmQgdGhhdCB3ZSBkb24ndCBzdXBwb3J0IGFycmF5c1xuXG5cdFx0dmFyIGluc2lkZSA9IHZhbHVlLmluc2lkZSB8fCB7fTtcblx0XHR2YWx1ZS5pbnNpZGUgPSBpbnNpZGU7XG5cblx0XHRpbnNpZGVbJ21heWJlLWNsYXNzLW5hbWUnXSA9IC9eW0EtWl1bXFxzXFxTXSovO1xuXHR9XG5cbn0oUHJpc20pKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=