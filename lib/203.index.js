(window.webpackJsonp=window.webpackJsonp||[]).push([[203],{308:function(e,n){!function(e){var n=e.languages.javascript["template-string"],t=n.pattern.source,r=n.inside.interpolation,a=r.inside["interpolation-punctuation"],i=r.pattern.source;function o(n,r){if(e.languages[n])return{pattern:RegExp("((?:"+r+")\\s*)"+t),lookbehind:!0,greedy:!0,inside:{"template-punctuation":{pattern:/^`|`$/,alias:"string"},"embedded-code":{pattern:/[\s\S]+/,alias:n}}}}function s(e,n){return"___"+n.toUpperCase()+"_"+e+"___"}function p(n,t,r){var a={code:n,grammar:t,language:r};return e.hooks.run("before-tokenize",a),a.tokens=e.tokenize(a.code,a.grammar),e.hooks.run("after-tokenize",a),a.tokens}function l(n){var t={};t["interpolation-punctuation"]=a;var i=e.tokenize(n,t);if(3===i.length){var o=[1,1];o.push.apply(o,p(i[1],e.languages.javascript,"javascript")),i.splice.apply(i,o)}return new e.Token("interpolation",i,r.alias,n)}function u(n,t,r){var a=e.tokenize(n,{interpolation:{pattern:RegExp(i),lookbehind:!0}}),o=0,u={},c=p(a.map((function(e){if("string"==typeof e)return e;for(var t,a=e.content;-1!==n.indexOf(t=s(o++,r)););return u[t]=a,t})).join(""),t,r),g=Object.keys(u);return o=0,function e(n){for(var t=0;t<n.length;t++){if(o>=g.length)return;var r=n[t];if("string"==typeof r||"string"==typeof r.content){var a=g[o],i="string"==typeof r?r:r.content,s=i.indexOf(a);if(-1!==s){++o;var p=i.substring(0,s),c=l(u[a]),f=i.substring(s+a.length),y=[];if(p&&y.push(p),y.push(c),f){var v=[f];e(v),y.push.apply(y,v)}"string"==typeof r?(n.splice.apply(n,[t,1].concat(y)),t+=y.length-1):r.content=y}}else{var d=r.content;Array.isArray(d)?e(d):e([d])}}}(c),new e.Token(r,c,"language-"+r,n)}e.languages.javascript["template-string"]=[o("css",/\b(?:styled(?:\([^)]*\))?(?:\s*\.\s*\w+(?:\([^)]*\))*)*|css(?:\s*\.\s*(?:global|resolve))?|createGlobalStyle|keyframes)/.source),o("html",/\bhtml|\.\s*(?:inner|outer)HTML\s*\+?=/.source),o("svg",/\bsvg/.source),o("markdown",/\b(?:md|markdown)/.source),o("graphql",/\b(?:gql|graphql(?:\s*\.\s*experimental)?)/.source),n].filter(Boolean);var c={javascript:!0,js:!0,typescript:!0,ts:!0,jsx:!0,tsx:!0};function g(e){return"string"==typeof e?e:Array.isArray(e)?e.map(g).join(""):g(e.content)}e.hooks.add("after-tokenize",(function(n){n.language in c&&function n(t){for(var r=0,a=t.length;r<a;r++){var i=t[r];if("string"!=typeof i){var o=i.content;if(Array.isArray(o))if("template-string"===i.type){var s=o[1];if(3===o.length&&"string"!=typeof s&&"embedded-code"===s.type){var p=g(s),l=s.alias,c=Array.isArray(l)?l[0]:l,f=e.languages[c];if(!f)continue;o[1]=u(p,f,c)}}else n(o);else"string"!=typeof o&&n([o])}}}(n.tokens)}))}(Prism)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,