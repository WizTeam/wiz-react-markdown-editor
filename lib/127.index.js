(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[127],{

/***/ "./node_modules/prismjs/components/prism-fortran.js":
/*!**********************************************************!*\
  !*** ./node_modules/prismjs/components/prism-fortran.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Prism.languages.fortran = {
	'quoted-number': {
		pattern: /[BOZ](['"])[A-F0-9]+\1/i,
		alias: 'number'
	},
	'string': {
		pattern: /(?:\w+_)?(['"])(?:\1\1|&(?:\r\n?|\n)(?:\s*!.+(?:\r\n?|\n))?|(?!\1).)*(?:\1|&)/,
		inside: {
			'comment': {
				pattern: /(&(?:\r\n?|\n)\s*)!.*/,
				lookbehind: true
			}
		}
	},
	'comment': {
		pattern: /!.*/,
		greedy: true
	},
	'boolean': /\.(?:TRUE|FALSE)\.(?:_\w+)?/i,
	'number': /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[ED][+-]?\d+)?(?:_\w+)?/i,
	'keyword': [
		// Types
		/\b(?:INTEGER|REAL|DOUBLE ?PRECISION|COMPLEX|CHARACTER|LOGICAL)\b/i,
		// END statements
		/\b(?:END ?)?(?:BLOCK ?DATA|DO|FILE|FORALL|FUNCTION|IF|INTERFACE|MODULE(?! PROCEDURE)|PROGRAM|SELECT|SUBROUTINE|TYPE|WHERE)\b/i,
		// Statements
		/\b(?:ALLOCATABLE|ALLOCATE|BACKSPACE|CALL|CASE|CLOSE|COMMON|CONTAINS|CONTINUE|CYCLE|DATA|DEALLOCATE|DIMENSION|DO|END|EQUIVALENCE|EXIT|EXTERNAL|FORMAT|GO ?TO|IMPLICIT(?: NONE)?|INQUIRE|INTENT|INTRINSIC|MODULE PROCEDURE|NAMELIST|NULLIFY|OPEN|OPTIONAL|PARAMETER|POINTER|PRINT|PRIVATE|PUBLIC|READ|RETURN|REWIND|SAVE|SELECT|STOP|TARGET|WHILE|WRITE)\b/i,
		// Others
		/\b(?:ASSIGNMENT|DEFAULT|ELEMENTAL|ELSE|ELSEWHERE|ELSEIF|ENTRY|IN|INCLUDE|INOUT|KIND|NULL|ONLY|OPERATOR|OUT|PURE|RECURSIVE|RESULT|SEQUENCE|STAT|THEN|USE)\b/i
	],
	'operator': [
		/\*\*|\/\/|=>|[=\/]=|[<>]=?|::|[+\-*=%]|\.(?:EQ|NE|LT|LE|GT|GE|NOT|AND|OR|EQV|NEQV)\.|\.[A-Z]+\./i,
		{
			// Use lookbehind to prevent confusion with (/ /)
			pattern: /(^|(?!\().)\/(?!\))/,
			lookbehind: true
		}
	],
	'punctuation': /\(\/|\/\)|[(),;:&]/
};

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJpc21qcy9jb21wb25lbnRzL3ByaXNtLWZvcnRyYW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQyxFIiwiZmlsZSI6IjEyNy5pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlByaXNtLmxhbmd1YWdlcy5mb3J0cmFuID0ge1xuXHQncXVvdGVkLW51bWJlcic6IHtcblx0XHRwYXR0ZXJuOiAvW0JPWl0oWydcIl0pW0EtRjAtOV0rXFwxL2ksXG5cdFx0YWxpYXM6ICdudW1iZXInXG5cdH0sXG5cdCdzdHJpbmcnOiB7XG5cdFx0cGF0dGVybjogLyg/OlxcdytfKT8oWydcIl0pKD86XFwxXFwxfCYoPzpcXHJcXG4/fFxcbikoPzpcXHMqIS4rKD86XFxyXFxuP3xcXG4pKT98KD8hXFwxKS4pKig/OlxcMXwmKS8sXG5cdFx0aW5zaWRlOiB7XG5cdFx0XHQnY29tbWVudCc6IHtcblx0XHRcdFx0cGF0dGVybjogLygmKD86XFxyXFxuP3xcXG4pXFxzKikhLiovLFxuXHRcdFx0XHRsb29rYmVoaW5kOiB0cnVlXG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHQnY29tbWVudCc6IHtcblx0XHRwYXR0ZXJuOiAvIS4qLyxcblx0XHRncmVlZHk6IHRydWVcblx0fSxcblx0J2Jvb2xlYW4nOiAvXFwuKD86VFJVRXxGQUxTRSlcXC4oPzpfXFx3Kyk/L2ksXG5cdCdudW1iZXInOiAvKD86XFxiXFxkKyg/OlxcLlxcZCopP3xcXEJcXC5cXGQrKSg/OltFRF1bKy1dP1xcZCspPyg/Ol9cXHcrKT8vaSxcblx0J2tleXdvcmQnOiBbXG5cdFx0Ly8gVHlwZXNcblx0XHQvXFxiKD86SU5URUdFUnxSRUFMfERPVUJMRSA/UFJFQ0lTSU9OfENPTVBMRVh8Q0hBUkFDVEVSfExPR0lDQUwpXFxiL2ksXG5cdFx0Ly8gRU5EIHN0YXRlbWVudHNcblx0XHQvXFxiKD86RU5EID8pPyg/OkJMT0NLID9EQVRBfERPfEZJTEV8Rk9SQUxMfEZVTkNUSU9OfElGfElOVEVSRkFDRXxNT0RVTEUoPyEgUFJPQ0VEVVJFKXxQUk9HUkFNfFNFTEVDVHxTVUJST1VUSU5FfFRZUEV8V0hFUkUpXFxiL2ksXG5cdFx0Ly8gU3RhdGVtZW50c1xuXHRcdC9cXGIoPzpBTExPQ0FUQUJMRXxBTExPQ0FURXxCQUNLU1BBQ0V8Q0FMTHxDQVNFfENMT1NFfENPTU1PTnxDT05UQUlOU3xDT05USU5VRXxDWUNMRXxEQVRBfERFQUxMT0NBVEV8RElNRU5TSU9OfERPfEVORHxFUVVJVkFMRU5DRXxFWElUfEVYVEVSTkFMfEZPUk1BVHxHTyA/VE98SU1QTElDSVQoPzogTk9ORSk/fElOUVVJUkV8SU5URU5UfElOVFJJTlNJQ3xNT0RVTEUgUFJPQ0VEVVJFfE5BTUVMSVNUfE5VTExJRll8T1BFTnxPUFRJT05BTHxQQVJBTUVURVJ8UE9JTlRFUnxQUklOVHxQUklWQVRFfFBVQkxJQ3xSRUFEfFJFVFVSTnxSRVdJTkR8U0FWRXxTRUxFQ1R8U1RPUHxUQVJHRVR8V0hJTEV8V1JJVEUpXFxiL2ksXG5cdFx0Ly8gT3RoZXJzXG5cdFx0L1xcYig/OkFTU0lHTk1FTlR8REVGQVVMVHxFTEVNRU5UQUx8RUxTRXxFTFNFV0hFUkV8RUxTRUlGfEVOVFJZfElOfElOQ0xVREV8SU5PVVR8S0lORHxOVUxMfE9OTFl8T1BFUkFUT1J8T1VUfFBVUkV8UkVDVVJTSVZFfFJFU1VMVHxTRVFVRU5DRXxTVEFUfFRIRU58VVNFKVxcYi9pXG5cdF0sXG5cdCdvcGVyYXRvcic6IFtcblx0XHQvXFwqXFwqfFxcL1xcL3w9PnxbPVxcL109fFs8Pl09P3w6OnxbK1xcLSo9JV18XFwuKD86RVF8TkV8TFR8TEV8R1R8R0V8Tk9UfEFORHxPUnxFUVZ8TkVRVilcXC58XFwuW0EtWl0rXFwuL2ksXG5cdFx0e1xuXHRcdFx0Ly8gVXNlIGxvb2tiZWhpbmQgdG8gcHJldmVudCBjb25mdXNpb24gd2l0aCAoLyAvKVxuXHRcdFx0cGF0dGVybjogLyhefCg/IVxcKCkuKVxcLyg/IVxcKSkvLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZVxuXHRcdH1cblx0XSxcblx0J3B1bmN0dWF0aW9uJzogL1xcKFxcL3xcXC9cXCl8WygpLDs6Jl0vXG59OyJdLCJzb3VyY2VSb290IjoiIn0=