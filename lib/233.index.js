(window.webpackJsonp=window.webpackJsonp||[]).push([[233],{338:function(e,n){!function(e){function n(e){return RegExp("(\\()"+e+"(?=[\\s\\)])")}function a(e){return RegExp("([\\s([])"+e+"(?=[\\s)])")}var t="[-+*/_~!@$%^=<>{}\\w]+",i="(\\()",r={heading:{pattern:/;;;.*/,alias:["comment","title"]},comment:/;.*/,string:{pattern:/"(?:[^"\\]|\\.)*"/,greedy:!0,inside:{argument:/[-A-Z]+(?=[.,\s])/,symbol:RegExp("`"+t+"'")}},"quoted-symbol":{pattern:RegExp("#?'"+t),alias:["variable","symbol"]},"lisp-property":{pattern:RegExp(":"+t),alias:"property"},splice:{pattern:RegExp(",@?"+t),alias:["symbol","variable"]},keyword:[{pattern:RegExp(i+"(?:(?:lexical-)?let\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)(?=\\s)"),lookbehind:!0},{pattern:RegExp(i+"(?:for|do|collect|return|finally|append|concat|in|by)(?=\\s)"),lookbehind:!0}],declare:{pattern:n("declare"),lookbehind:!0,alias:"keyword"},interactive:{pattern:n("interactive"),lookbehind:!0,alias:"keyword"},boolean:{pattern:a("(?:t|nil)"),lookbehind:!0},number:{pattern:a("[-+]?\\d+(?:\\.\\d*)?"),lookbehind:!0},defvar:{pattern:RegExp(i+"def(?:var|const|custom|group)\\s+"+t),lookbehind:!0,inside:{keyword:/^def[a-z]+/,variable:RegExp(t)}},defun:{pattern:RegExp(i+"(?:cl-)?(?:defun\\*?|defmacro)\\s+"+t+"\\s+\\([\\s\\S]*?\\)"),lookbehind:!0,inside:{keyword:/^(?:cl-)?def\S+/,arguments:null,function:{pattern:RegExp("(^\\s)"+t),lookbehind:!0},punctuation:/[()]/}},lambda:{pattern:RegExp(i+"lambda\\s+\\((?:&?"+t+"\\s*)*\\)"),lookbehind:!0,inside:{keyword:/^lambda/,arguments:null,punctuation:/[()]/}},car:{pattern:RegExp(i+t),lookbehind:!0},punctuation:[/(?:['`,]?\(|[)\[\]])/,{pattern:/(\s)\.(?=\s)/,lookbehind:!0}]},s={"lisp-marker":RegExp("&[-+*/_~!@$%^=<>{}\\w]+"),rest:{argument:{pattern:RegExp(t),alias:"variable"},varform:{pattern:RegExp(i+t+"\\s+\\S[\\s\\S]*(?=\\))"),lookbehind:!0,inside:{string:r.string,boolean:r.boolean,number:r.number,symbol:r.symbol,punctuation:/[()]/}}}},o="\\S+(?:\\s+\\S+)*",l={pattern:RegExp(i+"[\\s\\S]*(?=\\))"),lookbehind:!0,inside:{"rest-vars":{pattern:RegExp("&(?:rest|body)\\s+"+o),inside:s},"other-marker-vars":{pattern:RegExp("&(?:optional|aux)\\s+"+o),inside:s},keys:{pattern:RegExp("&key\\s+"+o+"(?:\\s+&allow-other-keys)?"),inside:s},argument:{pattern:RegExp(t),alias:"variable"},punctuation:/[()]/}};r.lambda.inside.arguments=l,r.defun.inside.arguments=e.util.clone(l),r.defun.inside.arguments.inside.sublist=l,e.languages.lisp=r,e.languages.elisp=r,e.languages.emacs=r,e.languages["emacs-lisp"]=r}(Prism)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJpc21qcy9jb21wb25lbnRzL3ByaXNtLWxpc3AuanMiXSwibmFtZXMiOlsiUHJpc20iLCJzaW1wbGVfZm9ybSIsIm5hbWUiLCJSZWdFeHAiLCJwcmltaXRpdmUiLCJwYXR0ZXJuIiwic3ltYm9sIiwicGFyIiwibGFuZ3VhZ2UiLCJoZWFkaW5nIiwiYWxpYXMiLCJjb21tZW50Iiwic3RyaW5nIiwiZ3JlZWR5IiwiaW5zaWRlIiwiYXJndW1lbnQiLCJzcGxpY2UiLCJrZXl3b3JkIiwibG9va2JlaGluZCIsImRlY2xhcmUiLCJpbnRlcmFjdGl2ZSIsImJvb2xlYW4iLCJudW1iZXIiLCJkZWZ2YXIiLCJ2YXJpYWJsZSIsImRlZnVuIiwiYXJndW1lbnRzIiwiZnVuY3Rpb24iLCJwdW5jdHVhdGlvbiIsImxhbWJkYSIsImNhciIsImFyZyIsInJlc3QiLCJ2YXJmb3JtIiwiZm9ybXMiLCJhcmdsaXN0Iiwia2V5cyIsInV0aWwiLCJjbG9uZSIsInN1Ymxpc3QiLCJsYW5ndWFnZXMiLCJsaXNwIiwiZWxpc3AiLCJlbWFjcyJdLCJtYXBwaW5ncyI6IjhFQUFDLFNBQVVBLEdBSVYsU0FBU0MsRUFBWUMsR0FDcEIsT0FBT0MsT0FBTyxRQUFVRCxFQUFPLGdCQUdoQyxTQUFTRSxFQUFVQyxHQUNsQixPQUFPRixPQUFPLFlBQWNFLEVBQVUsY0FPdkMsSUFBSUMsRUFBUyx5QkFJVEMsRUFBTSxRQUtOQyxFQUFXLENBR2RDLFFBQVMsQ0FDUkosUUFBUyxRQUNUSyxNQUFPLENBQUMsVUFBVyxVQUVwQkMsUUFBUyxNQUNUQyxPQUFRLENBQ1BQLFFBQVMsb0JBQ1RRLFFBQVEsRUFDUkMsT0FBUSxDQUNQQyxTQUFVLG9CQUNWVCxPQUFRSCxPQUFPLElBQU1HLEVBQVMsT0FHaEMsZ0JBQWlCLENBQ2hCRCxRQUFTRixPQUFPLE1BQVFHLEdBQ3hCSSxNQUFPLENBQUMsV0FBWSxXQUVyQixnQkFBaUIsQ0FDaEJMLFFBQVNGLE9BQU8sSUFBTUcsR0FDdEJJLE1BQU8sWUFFUk0sT0FBUSxDQUNQWCxRQUFTRixPQUFPLE1BQVFHLEdBQ3hCSSxNQUFPLENBQUMsU0FBVSxhQUVuQk8sUUFBUyxDQUNSLENBQ0NaLFFBQVNGLE9BQ1JJLHdKQUlEVyxZQUFZLEdBRWIsQ0FDQ2IsUUFBU0YsT0FDUkksa0VBRURXLFlBQVksSUFHZEMsUUFBUyxDQUNSZCxRQUFTSixFQUFZLFdBQ3JCaUIsWUFBWSxFQUNaUixNQUFPLFdBRVJVLFlBQWEsQ0FDWmYsUUFBU0osRUFBWSxlQUNyQmlCLFlBQVksRUFDWlIsTUFBTyxXQUVSVyxRQUFTLENBQ1JoQixRQUFTRCxFQUFVLGFBQ25CYyxZQUFZLEdBRWJJLE9BQVEsQ0FDUGpCLFFBQVNELEVBQVUseUJBQ25CYyxZQUFZLEdBRWJLLE9BQVEsQ0FDUGxCLFFBQVNGLE9BQU9JLEVBQU0sb0NBQXNDRCxHQUM1RFksWUFBWSxFQUNaSixPQUFRLENBQ1BHLFFBQVMsYUFDVE8sU0FBVXJCLE9BQU9HLEtBR25CbUIsTUFBTyxDQUNOcEIsUUFBU0YsT0FDUkksRUFDQyxxQ0FDQUQsRUFDQSx3QkFFRlksWUFBWSxFQUNaSixPQUFRLENBQ1BHLFFBQVMsa0JBR1RTLFVBQVcsS0FDWEMsU0FBVSxDQUNUdEIsUUFBU0YsT0FBTyxTQUFXRyxHQUMzQlksWUFBWSxHQUViVSxZQUFhLFNBR2ZDLE9BQVEsQ0FDUHhCLFFBQVNGLE9BQU9JLEVBQU0scUJBQXVCRCxFQUFTLGFBQ3REWSxZQUFZLEVBQ1pKLE9BQVEsQ0FDUEcsUUFBUyxVQUdUUyxVQUFXLEtBQ1hFLFlBQWEsU0FHZkUsSUFBSyxDQUNKekIsUUFBU0YsT0FBT0ksRUFBTUQsR0FDdEJZLFlBQVksR0FFYlUsWUFBYSxDQUVaLHVCQUVBLENBQ0N2QixRQUFTLGVBQ1RhLFlBQVksS0FLWGEsRUFBTSxDQUNULGNBQWU1QixPQTVISCwyQkE2SFo2QixLQUFNLENBQ0xqQixTQUFVLENBQ1RWLFFBQVNGLE9BQU9HLEdBQ2hCSSxNQUFPLFlBRVJ1QixRQUFTLENBQ1I1QixRQUFTRixPQUFPSSxFQUFNRCxFQUFOQywyQkFDaEJXLFlBQVksRUFDWkosT0FBUSxDQUNQRixPQUFRSixFQUFTSSxPQUNqQlMsUUFBU2IsRUFBU2EsUUFDbEJDLE9BQVFkLEVBQVNjLE9BQ2pCaEIsT0FBUUUsRUFBU0YsT0FDakJzQixZQUFhLFdBTWJNLEVBQVEsb0JBRVJDLEVBQVUsQ0FDYjlCLFFBQVNGLE9BQU9JLHNCQUNoQlcsWUFBWSxFQUNaSixPQUFRLENBQ1AsWUFBYSxDQUNaVCxRQUFTRixPQUFPLHFCQUF1QitCLEdBQ3ZDcEIsT0FBUWlCLEdBRVQsb0JBQXFCLENBQ3BCMUIsUUFBU0YsT0FBTyx3QkFBMEIrQixHQUMxQ3BCLE9BQVFpQixHQUVUSyxLQUFNLENBQ0wvQixRQUFTRixPQUFPLFdBQWErQixFQUFRLDhCQUNyQ3BCLE9BQVFpQixHQUVUaEIsU0FBVSxDQUNUVixRQUFTRixPQUFPRyxHQUNoQkksTUFBTyxZQUVSa0IsWUFBYSxTQUlmcEIsRUFBaUIsT0FBRU0sT0FBT1ksVUFBWVMsRUFDdEMzQixFQUFnQixNQUFFTSxPQUFPWSxVQUFZMUIsRUFBTXFDLEtBQUtDLE1BQU1ILEdBQ3REM0IsRUFBZ0IsTUFBRU0sT0FBT1ksVUFBVVosT0FBT3lCLFFBQVVKLEVBRXBEbkMsRUFBTXdDLFVBQVVDLEtBQU9qQyxFQUN2QlIsRUFBTXdDLFVBQVVFLE1BQVFsQyxFQUN4QlIsRUFBTXdDLFVBQVVHLE1BQVFuQyxFQUN4QlIsRUFBTXdDLFVBQVUsY0FBZ0JoQyxFQW5NakMsQ0FvTUVSIiwiZmlsZSI6IjIzMy5pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoUHJpc20pIHtcblx0Ly8gRnVuY3Rpb25zIHRvIGNvbnN0cnVjdCByZWd1bGFyIGV4cHJlc3Npb25zXG5cdC8vIHNpbXBsZSBmb3JtXG5cdC8vIGUuZy4gKGludGVyYWN0aXZlIC4uLiBvciAoaW50ZXJhY3RpdmUpXG5cdGZ1bmN0aW9uIHNpbXBsZV9mb3JtKG5hbWUpIHtcblx0XHRyZXR1cm4gUmVnRXhwKCcoXFxcXCgpJyArIG5hbWUgKyAnKD89W1xcXFxzXFxcXCldKScpO1xuXHR9XG5cdC8vIGJvb2xlYW5zIGFuZCBudW1iZXJzXG5cdGZ1bmN0aW9uIHByaW1pdGl2ZShwYXR0ZXJuKSB7XG5cdFx0cmV0dXJuIFJlZ0V4cCgnKFtcXFxccyhbXSknICsgcGF0dGVybiArICcoPz1bXFxcXHMpXSknKTtcblx0fVxuXG5cdC8vIFBhdHRlcm5zIGluIHJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBTeW1ib2wgbmFtZS4gU2VlIGh0dHBzOi8vd3d3LmdudS5vcmcvc29mdHdhcmUvZW1hY3MvbWFudWFsL2h0bWxfbm9kZS9lbGlzcC9TeW1ib2wtVHlwZS5odG1sXG5cdC8vICYgYW5kIDogYXJlIGV4Y2x1ZGVkIGFzIHRoZXkgYXJlIHVzdWFsbHkgdXNlZCBmb3Igc3BlY2lhbCBwdXJwb3Nlc1xuXHR2YXIgc3ltYm9sID0gJ1stKyovX34hQCQlXj08Pnt9XFxcXHddKyc7XG5cdC8vIHN5bWJvbCBzdGFydGluZyB3aXRoICYgdXNlZCBpbiBmdW5jdGlvbiBhcmd1bWVudHNcblx0dmFyIG1hcmtlciA9ICcmJyArIHN5bWJvbDtcblx0Ly8gT3BlbiBwYXJlbnRoZXNpcyBmb3IgbG9vay1iZWhpbmRcblx0dmFyIHBhciA9ICcoXFxcXCgpJztcblx0dmFyIGVuZHBhciA9ICcoPz1cXFxcKSknO1xuXHQvLyBFbmQgdGhlIHBhdHRlcm4gd2l0aCBsb29rLWFoZWFkIHNwYWNlXG5cdHZhciBzcGFjZSA9ICcoPz1cXFxccyknO1xuXG5cdHZhciBsYW5ndWFnZSA9IHtcblx0XHQvLyBUaHJlZSBvciBmb3VyIHNlbWljb2xvbnMgYXJlIGNvbnNpZGVyZWQgYSBoZWFkaW5nLlxuXHRcdC8vIFNlZSBodHRwczovL3d3dy5nbnUub3JnL3NvZnR3YXJlL2VtYWNzL21hbnVhbC9odG1sX25vZGUvZWxpc3AvQ29tbWVudC1UaXBzLmh0bWxcblx0XHRoZWFkaW5nOiB7XG5cdFx0XHRwYXR0ZXJuOiAvOzs7LiovLFxuXHRcdFx0YWxpYXM6IFsnY29tbWVudCcsICd0aXRsZSddXG5cdFx0fSxcblx0XHRjb21tZW50OiAvOy4qLyxcblx0XHRzdHJpbmc6IHtcblx0XHRcdHBhdHRlcm46IC9cIig/OlteXCJcXFxcXXxcXFxcLikqXCIvLFxuXHRcdFx0Z3JlZWR5OiB0cnVlLFxuXHRcdFx0aW5zaWRlOiB7XG5cdFx0XHRcdGFyZ3VtZW50OiAvWy1BLVpdKyg/PVsuLFxcc10pLyxcblx0XHRcdFx0c3ltYm9sOiBSZWdFeHAoJ2AnICsgc3ltYm9sICsgXCInXCIpXG5cdFx0XHR9XG5cdFx0fSxcblx0XHQncXVvdGVkLXN5bWJvbCc6IHtcblx0XHRcdHBhdHRlcm46IFJlZ0V4cChcIiM/J1wiICsgc3ltYm9sKSxcblx0XHRcdGFsaWFzOiBbJ3ZhcmlhYmxlJywgJ3N5bWJvbCddXG5cdFx0fSxcblx0XHQnbGlzcC1wcm9wZXJ0eSc6IHtcblx0XHRcdHBhdHRlcm46IFJlZ0V4cCgnOicgKyBzeW1ib2wpLFxuXHRcdFx0YWxpYXM6ICdwcm9wZXJ0eSdcblx0XHR9LFxuXHRcdHNwbGljZToge1xuXHRcdFx0cGF0dGVybjogUmVnRXhwKCcsQD8nICsgc3ltYm9sKSxcblx0XHRcdGFsaWFzOiBbJ3N5bWJvbCcsICd2YXJpYWJsZSddXG5cdFx0fSxcblx0XHRrZXl3b3JkOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBhdHRlcm46IFJlZ0V4cChcblx0XHRcdFx0XHRwYXIgK1xuXHRcdFx0XHRcdFx0Jyg/Oig/OmxleGljYWwtKT9sZXRcXFxcKj98KD86Y2wtKT9sZXRmfGlmfHdoZW58d2hpbGV8dW5sZXNzfGNvbnN8Y2wtbG9vcHxhbmR8b3J8bm90fGNvbmR8c2V0cXxlcnJvcnxtZXNzYWdlfG51bGx8cmVxdWlyZXxwcm92aWRlfHVzZS1wYWNrYWdlKScgK1xuXHRcdFx0XHRcdFx0c3BhY2Vcblx0XHRcdFx0KSxcblx0XHRcdFx0bG9va2JlaGluZDogdHJ1ZVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0cGF0dGVybjogUmVnRXhwKFxuXHRcdFx0XHRcdHBhciArICcoPzpmb3J8ZG98Y29sbGVjdHxyZXR1cm58ZmluYWxseXxhcHBlbmR8Y29uY2F0fGlufGJ5KScgKyBzcGFjZVxuXHRcdFx0XHQpLFxuXHRcdFx0XHRsb29rYmVoaW5kOiB0cnVlXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGVjbGFyZToge1xuXHRcdFx0cGF0dGVybjogc2ltcGxlX2Zvcm0oJ2RlY2xhcmUnKSxcblx0XHRcdGxvb2tiZWhpbmQ6IHRydWUsXG5cdFx0XHRhbGlhczogJ2tleXdvcmQnXG5cdFx0fSxcblx0XHRpbnRlcmFjdGl2ZToge1xuXHRcdFx0cGF0dGVybjogc2ltcGxlX2Zvcm0oJ2ludGVyYWN0aXZlJyksXG5cdFx0XHRsb29rYmVoaW5kOiB0cnVlLFxuXHRcdFx0YWxpYXM6ICdrZXl3b3JkJ1xuXHRcdH0sXG5cdFx0Ym9vbGVhbjoge1xuXHRcdFx0cGF0dGVybjogcHJpbWl0aXZlKCcoPzp0fG5pbCknKSxcblx0XHRcdGxvb2tiZWhpbmQ6IHRydWVcblx0XHR9LFxuXHRcdG51bWJlcjoge1xuXHRcdFx0cGF0dGVybjogcHJpbWl0aXZlKCdbLStdP1xcXFxkKyg/OlxcXFwuXFxcXGQqKT8nKSxcblx0XHRcdGxvb2tiZWhpbmQ6IHRydWVcblx0XHR9LFxuXHRcdGRlZnZhcjoge1xuXHRcdFx0cGF0dGVybjogUmVnRXhwKHBhciArICdkZWYoPzp2YXJ8Y29uc3R8Y3VzdG9tfGdyb3VwKVxcXFxzKycgKyBzeW1ib2wpLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdGluc2lkZToge1xuXHRcdFx0XHRrZXl3b3JkOiAvXmRlZlthLXpdKy8sXG5cdFx0XHRcdHZhcmlhYmxlOiBSZWdFeHAoc3ltYm9sKVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZGVmdW46IHtcblx0XHRcdHBhdHRlcm46IFJlZ0V4cChcblx0XHRcdFx0cGFyICtcblx0XHRcdFx0XHQnKD86Y2wtKT8oPzpkZWZ1blxcXFwqP3xkZWZtYWNybylcXFxccysnICtcblx0XHRcdFx0XHRzeW1ib2wgK1xuXHRcdFx0XHRcdCdcXFxccytcXFxcKFtcXFxcc1xcXFxTXSo/XFxcXCknXG5cdFx0XHQpLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdGluc2lkZToge1xuXHRcdFx0XHRrZXl3b3JkOiAvXig/OmNsLSk/ZGVmXFxTKy8sXG5cdFx0XHRcdC8vIFNlZSBiZWxvdywgdGhpcyBwcm9wZXJ0eSBuZWVkcyB0byBiZSBkZWZpbmVkIGxhdGVyIHNvIHRoYXQgaXQgY2FuXG5cdFx0XHRcdC8vIHJlZmVyZW5jZSB0aGUgbGFuZ3VhZ2Ugb2JqZWN0LlxuXHRcdFx0XHRhcmd1bWVudHM6IG51bGwsXG5cdFx0XHRcdGZ1bmN0aW9uOiB7XG5cdFx0XHRcdFx0cGF0dGVybjogUmVnRXhwKCcoXlxcXFxzKScgKyBzeW1ib2wpLFxuXHRcdFx0XHRcdGxvb2tiZWhpbmQ6IHRydWVcblx0XHRcdFx0fSxcblx0XHRcdFx0cHVuY3R1YXRpb246IC9bKCldL1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0bGFtYmRhOiB7XG5cdFx0XHRwYXR0ZXJuOiBSZWdFeHAocGFyICsgJ2xhbWJkYVxcXFxzK1xcXFwoKD86Jj8nICsgc3ltYm9sICsgJ1xcXFxzKikqXFxcXCknKSxcblx0XHRcdGxvb2tiZWhpbmQ6IHRydWUsXG5cdFx0XHRpbnNpZGU6IHtcblx0XHRcdFx0a2V5d29yZDogL15sYW1iZGEvLFxuXHRcdFx0XHQvLyBTZWUgYmVsb3csIHRoaXMgcHJvcGVydHkgbmVlZHMgdG8gYmUgZGVmaW5lZCBsYXRlciBzbyB0aGF0IGl0IGNhblxuXHRcdFx0XHQvLyByZWZlcmVuY2UgdGhlIGxhbmd1YWdlIG9iamVjdC5cblx0XHRcdFx0YXJndW1lbnRzOiBudWxsLFxuXHRcdFx0XHRwdW5jdHVhdGlvbjogL1soKV0vXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRjYXI6IHtcblx0XHRcdHBhdHRlcm46IFJlZ0V4cChwYXIgKyBzeW1ib2wpLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZVxuXHRcdH0sXG5cdFx0cHVuY3R1YXRpb246IFtcblx0XHRcdC8vIG9wZW4gcGFyZW4sIGJyYWNrZXRzLCBhbmQgY2xvc2UgcGFyZW5cblx0XHRcdC8oPzpbJ2AsXT9cXCh8WylcXFtcXF1dKS8sXG5cdFx0XHQvLyBjb25zXG5cdFx0XHR7XG5cdFx0XHRcdHBhdHRlcm46IC8oXFxzKVxcLig/PVxccykvLFxuXHRcdFx0XHRsb29rYmVoaW5kOiB0cnVlXG5cdFx0XHR9LFxuXHRcdF1cblx0fTtcblxuXHR2YXIgYXJnID0ge1xuXHRcdCdsaXNwLW1hcmtlcic6IFJlZ0V4cChtYXJrZXIpLFxuXHRcdHJlc3Q6IHtcblx0XHRcdGFyZ3VtZW50OiB7XG5cdFx0XHRcdHBhdHRlcm46IFJlZ0V4cChzeW1ib2wpLFxuXHRcdFx0XHRhbGlhczogJ3ZhcmlhYmxlJ1xuXHRcdFx0fSxcblx0XHRcdHZhcmZvcm06IHtcblx0XHRcdFx0cGF0dGVybjogUmVnRXhwKHBhciArIHN5bWJvbCArICdcXFxccytcXFxcU1tcXFxcc1xcXFxTXSonICsgZW5kcGFyKSxcblx0XHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdFx0aW5zaWRlOiB7XG5cdFx0XHRcdFx0c3RyaW5nOiBsYW5ndWFnZS5zdHJpbmcsXG5cdFx0XHRcdFx0Ym9vbGVhbjogbGFuZ3VhZ2UuYm9vbGVhbixcblx0XHRcdFx0XHRudW1iZXI6IGxhbmd1YWdlLm51bWJlcixcblx0XHRcdFx0XHRzeW1ib2w6IGxhbmd1YWdlLnN5bWJvbCxcblx0XHRcdFx0XHRwdW5jdHVhdGlvbjogL1soKV0vXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0dmFyIGZvcm1zID0gJ1xcXFxTKyg/OlxcXFxzK1xcXFxTKykqJztcblxuXHR2YXIgYXJnbGlzdCA9IHtcblx0XHRwYXR0ZXJuOiBSZWdFeHAocGFyICsgJ1tcXFxcc1xcXFxTXSonICsgZW5kcGFyKSxcblx0XHRsb29rYmVoaW5kOiB0cnVlLFxuXHRcdGluc2lkZToge1xuXHRcdFx0J3Jlc3QtdmFycyc6IHtcblx0XHRcdFx0cGF0dGVybjogUmVnRXhwKCcmKD86cmVzdHxib2R5KVxcXFxzKycgKyBmb3JtcyksXG5cdFx0XHRcdGluc2lkZTogYXJnXG5cdFx0XHR9LFxuXHRcdFx0J290aGVyLW1hcmtlci12YXJzJzoge1xuXHRcdFx0XHRwYXR0ZXJuOiBSZWdFeHAoJyYoPzpvcHRpb25hbHxhdXgpXFxcXHMrJyArIGZvcm1zKSxcblx0XHRcdFx0aW5zaWRlOiBhcmdcblx0XHRcdH0sXG5cdFx0XHRrZXlzOiB7XG5cdFx0XHRcdHBhdHRlcm46IFJlZ0V4cCgnJmtleVxcXFxzKycgKyBmb3JtcyArICcoPzpcXFxccysmYWxsb3ctb3RoZXIta2V5cyk/JyksXG5cdFx0XHRcdGluc2lkZTogYXJnXG5cdFx0XHR9LFxuXHRcdFx0YXJndW1lbnQ6IHtcblx0XHRcdFx0cGF0dGVybjogUmVnRXhwKHN5bWJvbCksXG5cdFx0XHRcdGFsaWFzOiAndmFyaWFibGUnXG5cdFx0XHR9LFxuXHRcdFx0cHVuY3R1YXRpb246IC9bKCldL1xuXHRcdH1cblx0fTtcblxuXHRsYW5ndWFnZVsnbGFtYmRhJ10uaW5zaWRlLmFyZ3VtZW50cyA9IGFyZ2xpc3Q7XG5cdGxhbmd1YWdlWydkZWZ1biddLmluc2lkZS5hcmd1bWVudHMgPSBQcmlzbS51dGlsLmNsb25lKGFyZ2xpc3QpO1xuXHRsYW5ndWFnZVsnZGVmdW4nXS5pbnNpZGUuYXJndW1lbnRzLmluc2lkZS5zdWJsaXN0ID0gYXJnbGlzdDtcblxuXHRQcmlzbS5sYW5ndWFnZXMubGlzcCA9IGxhbmd1YWdlO1xuXHRQcmlzbS5sYW5ndWFnZXMuZWxpc3AgPSBsYW5ndWFnZTtcblx0UHJpc20ubGFuZ3VhZ2VzLmVtYWNzID0gbGFuZ3VhZ2U7XG5cdFByaXNtLmxhbmd1YWdlc1snZW1hY3MtbGlzcCddID0gbGFuZ3VhZ2U7XG59KFByaXNtKSk7XG4iXSwic291cmNlUm9vdCI6IiJ9